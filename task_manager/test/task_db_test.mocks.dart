// Mocks generated by Mockito 5.4.6 from annotations
// in task_manager/test/task_db_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i2;
import 'package:task_manager/models/task.dart' as _i5;
import 'package:task_manager/service/task_db.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabase_0 extends _i1.SmartFake implements _i2.Database {
  _FakeDatabase_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [TaskDB].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskDB extends _i1.Mock implements _i3.TaskDB {
  MockTaskDB() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Database> get database =>
      (super.noSuchMethod(
            Invocation.getter(#database),
            returnValue: _i4.Future<_i2.Database>.value(
              _FakeDatabase_0(this, Invocation.getter(#database)),
            ),
          )
          as _i4.Future<_i2.Database>);

  @override
  _i4.Future<List<_i5.Task>> getTasks() =>
      (super.noSuchMethod(
            Invocation.method(#getTasks, []),
            returnValue: _i4.Future<List<_i5.Task>>.value(<_i5.Task>[]),
          )
          as _i4.Future<List<_i5.Task>>);

  @override
  _i4.Future<List<_i5.Task>> getTaskPage({int? offset = 0, int? limit = 20}) =>
      (super.noSuchMethod(
            Invocation.method(#getTaskPage, [], {
              #offset: offset,
              #limit: limit,
            }),
            returnValue: _i4.Future<List<_i5.Task>>.value(<_i5.Task>[]),
          )
          as _i4.Future<List<_i5.Task>>);

  @override
  _i4.Future<int> insertTask(_i5.Task? task) =>
      (super.noSuchMethod(
            Invocation.method(#insertTask, [task]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<int> updateTask(_i5.Task? task) =>
      (super.noSuchMethod(
            Invocation.method(#updateTask, [task]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<int> deleteTask(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteTask, [id]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);
}
